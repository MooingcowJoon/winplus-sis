package com.samyang.winplus.sis.market.controller;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.samyang.winplus.common.system.model.EmpSessionDto;
import com.samyang.winplus.common.system.util.CommonUtil;
import com.samyang.winplus.sis.market.service.TellOrderService;

@RequestMapping("/sis/market/sales")
@RestController
public class TellOrderController {

	@Autowired
	protected CommonUtil commonUtil;
	
	@Autowired
	TellOrderService tellOrderService;
	
	@SuppressWarnings("unused")
	private final Logger logger = LoggerFactory.getLogger(getClass());

	private final static String DEFAULT_PATH = "sis/market/sales";
	
	/**
	  * 점포업무관리 - 판매관리 - 전화주문
	  * @author 정혜원
	  * @param request
	  * @return ModelAndView
	  */
	@RequestMapping(value="TellOrder.sis", method=RequestMethod.POST)
	public ModelAndView TellOrder(HttpServletRequest request){
		ModelAndView mav = new ModelAndView();
		mav.setViewName(DEFAULT_PATH + "/" + "tellOrder");
		return mav;
	}
	
	/**
	 * 점포업무관리 - 판매관리 - 전화주문 - 전화번호로 회원목록 불러오기
	 * @param request
	 * @return
	 */
	@RequestMapping(value="getCIDMemberList.do", method=RequestMethod.POST)
	public Map<String, Object> getCIDMemberList(HttpServletRequest request){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		
		EmpSessionDto empSessionDto = commonUtil.getEmpSessionDto(request);
		String ORGN_DIV_CD = empSessionDto.getOrgn_div_cd();
		String ORGN_CD = empSessionDto.getOrgn_cd();
		String TEL_NO = request.getParameter("TEL_NO");
		
		paramMap.put("ORGN_DIV_CD", ORGN_DIV_CD);
		paramMap.put("ORGN_CD", ORGN_CD);
		paramMap.put("TEL_NO", TEL_NO);
		
		List<Map<String, Object>> memberList = null;
		
		try {
			memberList = tellOrderService.getCIDMemberList(paramMap);
			resultMap.put("dataList", memberList);
		}catch(SQLException e) {
			resultMap = commonUtil.getErrorMap(e);
		}catch(Exception e) {
			resultMap = commonUtil.getErrorMap(e);
		}
		
		return resultMap;
	}
	
	/**
	  * 점포업무관리 - 판매관리 - 전화주문 - 회원정보 불러오기
	  * @author 정혜원
	  * @param request
	  * @return Map<String, Object>
	  */
	@RequestMapping(value="getCIDMemberInfo.do", method=RequestMethod.POST)
	public Map<String, Object> getCIDMemberInfo(HttpServletRequest request){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		
		EmpSessionDto empSessionDto = commonUtil.getEmpSessionDto(request);
		String ORGN_DIV_CD = empSessionDto.getOrgn_div_cd();
		String ORGN_CD = empSessionDto.getOrgn_cd();
		String MEM_NO = request.getParameter("MEM_NO");
		
		paramMap.put("ORGN_DIV_CD", ORGN_DIV_CD);
		paramMap.put("ORGN_CD", ORGN_CD);
		paramMap.put("MEM_NO", MEM_NO);
		
		Map<String, Object> MemberInfoValue = new HashMap<String, Object>();
		
		try {
			MemberInfoValue = tellOrderService.getCIDMemberInfo(paramMap);
			resultMap.put("dataMap", MemberInfoValue);
		}catch(SQLException e) {
			resultMap = commonUtil.getErrorMap(e);
		}catch(Exception e) {
			resultMap = commonUtil.getErrorMap(e);
		}
		
		return resultMap;
	}
	
	/**
	  * 점포업무관리 - 판매관리 - 전화주문 - 해당회원 주문내역 헤더조회
	  * @author 정혜원
	  * @param request
	  * @return Map<String, Object>
	  */
	@RequestMapping(value="getMemOrderHeaderList.do", method=RequestMethod.POST)
	public Map<String, Object> getMemOrderHeaderList(HttpServletRequest request ,@RequestParam Map<String, Object> paramMap){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		List<Map<String, Object>> MemOrderHeaderList = new ArrayList<Map<String, Object>>();
		
		try {
			MemOrderHeaderList = tellOrderService.getMemOrderHeaderList(paramMap);
			resultMap.put("dataMap", MemOrderHeaderList);
		}catch(SQLException e) {
			resultMap = commonUtil.getErrorMap(e);
		}catch(Exception e) {
			resultMap = commonUtil.getErrorMap(e);
		}
		
		return resultMap;
	}
	
	/**
	  * 점포업무관리 - 판매관리 - 전화주문 - 해당회원 주문내역 디테일조회
	  * @author 정혜원
	  * @param request
	  * @return Map<String, Object>
	  */
	@RequestMapping(value="getMemOrderDetailList.do", method=RequestMethod.POST)
	public Map<String, Object> getMemOrderDetailList(HttpServletRequest request, @RequestParam Map<String, Object> paramMap){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> MemOrderDetailList = new ArrayList<Map<String, Object>>();
		
		try {
			MemOrderDetailList = tellOrderService.getMemOrderDetailList(paramMap);
			resultMap.put("dataMap", MemOrderDetailList);
		}catch(SQLException e) {
			resultMap = commonUtil.getErrorMap(e);
		}catch(Exception e) {
			resultMap = commonUtil.getErrorMap(e);
		}
		
		return resultMap;
	}
	
	/**
	 * 점포업무관리 - 판매관리 - 전화주문 - 주문접수완료 처리
	 * @author 강신영
	 * @param request
	 * @return Map<String, Object>
	 */
	@RequestMapping(value="receiptMemOrderList.do", method=RequestMethod.POST)
	public Map<String, Object> receiptMemOrderList(HttpServletRequest request, @RequestParam List<String> paramList){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		int successCnt = 0;
		int resultValue = 0;
		
		EmpSessionDto empSessionDto = commonUtil.getEmpSessionDto(request);
		String emp_no = empSessionDto.getEmp_no();
		String ORGN_DIV_CD = empSessionDto.getOrgn_div_cd();
		String ORGN_CD = empSessionDto.getOrgn_cd();
		
		paramMap.put("ORGN_DIV_CD", ORGN_DIV_CD);
		paramMap.put("ORGN_CD", ORGN_CD);
		paramMap.put("emp_no", emp_no);
		
		try {
			
			for(int i = 0 ; i < paramList.size() ; i++) {
				paramMap.put("TEL_ORD_CD", paramList.get(i));
				resultValue = tellOrderService.receiptMemOrderList(paramMap);
				successCnt += resultValue;
			}
			
			resultMap.put("resultValue", successCnt);
		}catch(SQLException e) {
			resultMap = commonUtil.getErrorMap(e);
		}catch(Exception e) {
			resultMap = commonUtil.getErrorMap(e);
		}
		
		return resultMap;
	}
	
	/**
	 * 점포업무관리 - 판매관리 - 전화주문 - 주문취소건 재주문 완료 처리
	 * @author 강신영
	 * @param request
	 * @return Map<String, Object>
	 */
	@RequestMapping(value="reOrderMemOrderList.do", method=RequestMethod.POST)
	public Map<String, Object> reOrderMemOrderList(HttpServletRequest request, @RequestParam List<String> paramList){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		int successCnt = 0;
		int resultValue = 0;
		
		EmpSessionDto empSessionDto = commonUtil.getEmpSessionDto(request);
		String emp_no = empSessionDto.getEmp_no();
		String ORGN_DIV_CD = empSessionDto.getOrgn_div_cd();
		String ORGN_CD = empSessionDto.getOrgn_cd();
		
		paramMap.put("ORGN_DIV_CD", ORGN_DIV_CD);
		paramMap.put("ORGN_CD", ORGN_CD);
		paramMap.put("emp_no", emp_no);
		
		try {
			
			for(int i = 0 ; i < paramList.size() ; i++) {
				paramMap.put("TEL_ORD_CD", paramList.get(i));
				resultValue = tellOrderService.reOrderMemOrderList(paramMap);
				successCnt += resultValue;
			}
			
			resultMap.put("resultValue", successCnt);
		}catch(SQLException e) {
			resultMap = commonUtil.getErrorMap(e);
		}catch(Exception e) {
			resultMap = commonUtil.getErrorMap(e);
		}
		
		return resultMap;
	}
	
	/**
	 * 점포업무관리 - 판매관리 - 전화주문 - 해당회원 주문내역 취소처리
	 * @author 정혜원
	 * @param request
	 * @return Map<String, Object>
	 */
	@RequestMapping(value="cancelMemOrderList.do", method=RequestMethod.POST)
	public Map<String, Object> cancelMemOrderList(HttpServletRequest request, @RequestParam List<String> paramList){
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		int cancel_cnt = 0;
		int resultValue = 0;
		
		EmpSessionDto empSessionDto = commonUtil.getEmpSessionDto(request);
		String emp_no = empSessionDto.getEmp_no();
		String ORGN_DIV_CD = empSessionDto.getOrgn_div_cd();
		String ORGN_CD = empSessionDto.getOrgn_cd();
		
		paramMap.put("ORGN_DIV_CD", ORGN_DIV_CD);
		paramMap.put("ORGN_CD", ORGN_CD);
		paramMap.put("emp_no", emp_no);
		
		try {
			
			for(int i = 0 ; i < paramList.size() ; i++) {
				paramMap.put("TEL_ORD_CD", paramList.get(i));
				resultValue = tellOrderService.cancelMemOrderList(paramMap);
				cancel_cnt += resultValue;
			}
			
			resultMap.put("resultValue", cancel_cnt);
		}catch(SQLException e) {
			resultMap = commonUtil.getErrorMap(e);
		}catch(Exception e) {
			resultMap = commonUtil.getErrorMap(e);
		}
		
		return resultMap;
	}
	
	/**
	  * openNewOrderPopup - 점포업무관리 - 판매관리 - 전화주문 - 새주문서작성팝업
	  * @author 정혜원
	  * @param request
	  * @return ModelAndView
	  */
	@RequestMapping(value = "openNewOrderPopup.sis", method = RequestMethod.POST)
	public ModelAndView openNewOrderPopup(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView();
		mav.addObject("memberInfo", request.getParameter("memberInfo"));
		mav.setViewName(DEFAULT_PATH + "/" + "openNewOrderPopup");
		return mav;
	}
	
	/**
	  * 점포업무관리 - 판매관리 - 전화주문 - 새주문서작성 - 거래내역불러오기
	  * @author 정혜원
	  * @param request
	  * @return ModelAndView
	  */
	@RequestMapping(value="openTradeStatementGridPopup.sis", method=RequestMethod.POST)
	public ModelAndView openTradeStatementGridPopup(HttpServletRequest request){
		ModelAndView mav = new ModelAndView();
		mav.addObject("Mem_Info", request.getParameter("Mem_Info"));
		mav.setViewName(DEFAULT_PATH + "/" + "openTradeStatementGridPopup");
		return mav;
	}
	
	/**
	* getOpenNewOrderPopupList -새주문서작성팝업 - 상품검색 추가정보조회
	* 
	* @author 최지민
	* @return Map<String, Object>
	* @throws SQLException
	* @throws Exception
	*/
	@RequestMapping(value="getNewOrderListInfo.do", method=RequestMethod.POST)
	public Map<String, Object> getNewOrderListInfo(HttpServletRequest request) throws SQLException, Exception{
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		
		EmpSessionDto empSessionDto = commonUtil.getEmpSessionDto(request);
		String ORGN_DIV_CD = empSessionDto.getOrgn_div_cd();
		String ORGN_CD = empSessionDto.getOrgn_cd();
		String GOODS_NO = request.getParameter("GOODS_NO");
		String BCD_CD = request.getParameter("BCD_CD");
		
		paramMap.put("GOODS_NO", GOODS_NO);
		paramMap.put("BCD_CD", BCD_CD);
		paramMap.put("ORGN_DIV_CD", ORGN_DIV_CD);
		paramMap.put("ORGN_CD", ORGN_CD);
		
		try{
			List<Map<String, Object>> gridDataList = tellOrderService.getNewOrderListInfo(paramMap);
			resultMap.put("gridDataList", gridDataList);
		} catch(SQLException e){
			resultMap = commonUtil.getErrorMap(e);
		} catch(Exception e){
			resultMap = commonUtil.getErrorMap(e);
		}
		
		return resultMap;
	}
	
	/**
	* saveOpenNewOrderPopupList -새주문서작성팝업 - 상품내역 저장
	* 
	* @author 정혜원
	* @param request
	* @return Map<String, Object>
	* @throws SQLException
	* @throws Exception
	*/
	@RequestMapping(value="saveNewOrderPopupList.do", method=RequestMethod.POST)
	public Map<String, Object> saveNewOrderPopupList(HttpServletRequest request, String SALE_PRICE, String SALE_VAT_AMT, String SALE_QTY, String PAY_SUM_AMT, String SALE_TOT_AMT) throws SQLException, Exception{
		Map<String, Object> resultMap = new HashMap<String, Object>();
		EmpSessionDto empSessionDto = commonUtil.getEmpSessionDto(request);
		String emp_no = empSessionDto.getEmp_no();
		String ORGN_DIV_CD = empSessionDto.getOrgn_div_cd();
		String ORGN_CD = empSessionDto.getOrgn_cd();
		
		List<Map<String,Object>> dhtmlxParamMapList = commonUtil.getDhtmlXParamMapList(request);
		//logger.debug("saveNewOrder List >>> " + dhtmlxParamMapList);
		try {
			for(Map<String, Object> dhtmlxParamMap : dhtmlxParamMapList) {
				dhtmlxParamMap.put("EMP_NO", emp_no);
				dhtmlxParamMap.put("ORGN_DIV_CD", ORGN_DIV_CD);
				dhtmlxParamMap.put("ORGN_CD", ORGN_CD);
			}
			//logger.debug("새주문서작성 저장 리스트 >>> " + dhtmlxParamMapList);
			resultMap = tellOrderService.saveNewOrderPopupList(dhtmlxParamMapList);
			//logger.debug("Controller resultMap >>>>> " + resultMap);
		}catch(SQLException e) {
			resultMap = commonUtil.getErrorMap(e);
		}catch(Exception e) {
			resultMap = commonUtil.getErrorMap(e);
		}
		return resultMap;
	}
	/**
	  * 판매관리 - 전화주문관리(직영점) - 주문서조회(전화)
	  * @author 한정훈
	  * @param request
	  * @return ModelAndView
	  */
	@RequestMapping(value="TellOrderHistory.sis", method=RequestMethod.POST)
	public ModelAndView TellOrderHistory(HttpServletRequest request){
		ModelAndView mav = new ModelAndView();
		mav.setViewName(DEFAULT_PATH + "/" + "tellOrderHistory");
		return mav;
	}
	/**
	  * 판매관리 - 전화주문관리(직영점) - 주문서조회(전화) - 회원별 상세 팝업
	  * @author 한정훈
	  * @param request
	  * @return ModelAndView
	  */
	@RequestMapping(value = "openTellOrderHistoryPopup.sis", method = RequestMethod.POST)
	public ModelAndView openTellOrderHistoryPopup(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName(DEFAULT_PATH + "/" + "openTellOrderHistoryPopup");
		
		String tellInfo = request.getParameter("tellInfo");
		mav.addObject("tellInfo", tellInfo);
		
		return mav;
	}
	/**
	  * 판매관리 - 전화주문관리(직영점) - 주문서조회(전화) - 조회
	  * @author 한정훈
	  * @param request
	  * @return Map<String, Object>
	  * @throws SQLException
	  * @throws Exception
	  */
	@ResponseBody
	@RequestMapping(value="getOrderListByGroup.do", method=RequestMethod.POST)
	public Map<String, Object> getOrderListByGroup(HttpServletRequest request, @RequestBody Map<String, Object>paramMap) throws SQLException, Exception{
		Map<String, Object> resultMap = new HashMap<String, Object>();
		//logger.debug("paramMap >>>> " + paramMap);
		
		List<Map<String, Object>> getOnlineSalesInfo = tellOrderService.getOrderListByGroup(paramMap);
		resultMap.put("gridDataList", getOnlineSalesInfo);
		
		return resultMap;
	}
	/**
	  * 판매관리 - 전화주문관리(직영점) - 주문서조회(전화) - 팝업 조회1,2
	  * @author 한정훈
	  * @param request
	  * @return Map<String, Object>
	  * @throws SQLException
	  * @throws Exception
	  */
	@RequestMapping(value="getTellOrderinitdata.do", method=RequestMethod.POST)
	public Map<String, Object> getTellOrderinitdata(HttpServletRequest request, @RequestParam Map<String, Object>paramMap) throws SQLException, Exception{
		Map<String, Object> resultMap = new HashMap<String, Object>();
		//logger.debug("paramMap >>>> " + paramMap);
		Map<String, Object> getMemdata = tellOrderService.getMemdata(paramMap);
		resultMap.put("dataMap", getMemdata);
		
		List<Map<String, Object>> getOrderByDate = tellOrderService.getOrderByDate(paramMap);
		resultMap.put("gridDataList", getOrderByDate);
		
		return resultMap;
	}
	/**
	  * 판매관리 - 전화주문관리(직영점) - 주문서조회(전화) - 팝업 조회2
	  * @author 한정훈
	  * @param request
	  * @return Map<String, Object>
	  * @throws SQLException
	  * @throws Exception
	  */
	@RequestMapping(value="getMemOrderBodydata.do", method=RequestMethod.POST)
	public Map<String, Object> getMemOrderBodydata(HttpServletRequest request, @RequestParam Map<String, Object>paramMap) throws SQLException, Exception{
		Map<String, Object> resultMap = new HashMap<String, Object>();
		//logger.debug("paramMap >>>> " + paramMap);
		
		List<Map<String, Object>> getOrderByDate = tellOrderService.getOrderByDate(paramMap);
		resultMap.put("gridDataList", getOrderByDate);
		
		return resultMap;
	}
	/**
	  * 판매관리 - 전화주문관리(직영점) - 주문서조회(전화) - 팝업 저장
	  * @author 한정훈
	  * @param request
	  * @return Map<String, Object>
	  * @throws SQLException
	  * @throws Exception
	  */
	@ResponseBody
	@RequestMapping(value="saveTellOrderDetailPopup.do", method=RequestMethod.POST)
	public Map<String, Object> saveTellOrderDetailPopup(HttpServletRequest request, @RequestBody Map<String, Object>paramMap) throws SQLException, Exception{
		Map<String, Object> resultMap = new HashMap<String, Object>();
		//logger.debug("paramMap >>>> " + paramMap);
		tellOrderService.saveTellOrderDetailPopup(paramMap);
		
		return resultMap;
	}
	
}
